import { describe, it, expect, vi, beforeEach } from 'vitest';
import { PostService } from '../post.service';
import api from '../api';

// Mock the API module
vi.mock('../api', () => ({
  default: {
    get: vi.fn(),
    post: vi.fn(),
    put: vi.fn(),
    delete: vi.fn()
  }
}));

describe('PostService', () => {
  beforeEach(() => {
    // Reset all mocks
    vi.clearAllMocks();
  });

  it('should fetch all posts', async () => {
    // Arrange
    mockApi.get.mockResolvedValueOnce({
      data: [
        { id: 1, name: 'Test Post 1', description: 'Test Description 1', createdAt: '2023-01-01T00:00:00Z' },
        { id: 2, name: 'Test Post 2', description: 'Test Description 2', createdAt: '2023-01-02T00:00:00Z' },
      ]
    });
    
    // Act & Assert
    await expect(PostService.getAll()).resolves.toEqual([
      { id: 1, name: 'Test Post 1', description: 'Test Description 1', createdAt: '2023-01-01T00:00:00Z' },
      { id: 2, name: 'Test Post 2', description: 'Test Description 2', createdAt: '2023-01-02T00:00:00Z' },
    ]);
  });

  it('should fetch posts with name filter', async () => {
    // Arrange
    mockApi.get.mockResolvedValueOnce({
      data: [
        { id: 1, name: 'Test Post 1', description: 'Test Description 1', createdAt: '2023-01-01T00:00:00Z' },
      ]
    });
    
    // Act
    await PostService.getAll('Test Post 1');
    
    // Assert
    expect(mockApi.get).toHaveBeenCalledWith('/posts', { params: { name: 'Test Post 1' } });
  });

  it('should fetch a post by id', async () => {
    // Arrange
    mockApi.get.mockResolvedValueOnce({
      data: { id: 1, name: 'Test Post 1', description: 'Test Description 1', createdAt: '2023-01-01T00:00:00Z' }
    });
    
    // Act & Assert
    await expect(PostService.getById(1)).resolves.toEqual({
      id: 1, name: 'Test Post 1', description: 'Test Description 1', createdAt: '2023-01-01T00:00:00Z'
    });
    expect(mockApi.get).toHaveBeenCalledWith('/posts/1');
  });

  it('should create a post', async () => {
    // Arrange
    const newPost = { name: 'New Post', description: 'New Description' };
    mockApi.post.mockResolvedValueOnce({
      data: { id: 3, ...newPost, createdAt: '2023-01-03T00:00:00Z' }
    });
    
    // Act & Assert
    await expect(PostService.create(newPost)).resolves.toEqual({
      id: 3, name: 'New Post', description: 'New Description', createdAt: '2023-01-03T00:00:00Z'
    });
    expect(mockApi.post).toHaveBeenCalledWith('/posts', newPost);
  });

  it('should update a post', async () => {
    // Arrange
    const updatedPost = { name: 'Updated Post', description: 'Updated Description' };
    mockApi.put.mockResolvedValueOnce({
      data: { id: 1, ...updatedPost, createdAt: '2023-01-01T00:00:00Z' }
    });
    
    // Act & Assert
    await expect(PostService.update(1, updatedPost)).resolves.toEqual({
      id: 1, name: 'Updated Post', description: 'Updated Description', createdAt: '2023-01-01T00:00:00Z'
    });
    expect(mockApi.put).toHaveBeenCalledWith('/posts/1', updatedPost);
  });

  it('should delete a post', async () => {
    // Arrange
    mockApi.delete.mockResolvedValueOnce({ status: 200 });
    
    // Act & Assert
    await expect(PostService.delete(1)).resolves.toBeUndefined();
    expect(mockApi.delete).toHaveBeenCalledWith('/posts/1');
  });
});
